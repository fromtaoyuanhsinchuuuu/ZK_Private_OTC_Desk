{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"15082921748164719498","abi":{"parameters":[{"name":"merkle_root","type":{"kind":"field"},"visibility":"private"},{"name":"leaf","type":{"kind":"field"},"visibility":"private"},{"name":"path","type":{"kind":"array","length":16,"type":{"kind":"field"}},"visibility":"private"},{"name":"dirs","type":{"kind":"array","length":16,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9Wa224TMRCGvQnnMyQ9n9JQSiml9e7sJN5SWl6FiM37PwL95UHkwhIX+SvZliJHE+nTJP4mu2tP5eK4u39d2fvq/jW0+YPNq7FRIjZOxDYSsc1EbCsR207EdhKx3URsLxHbT8QOErHDROwoEZskYsc2r46BzT9tFj9r237e9LXUv3zTLYL6VhezUIdag/5ugkgf2jDvFt3cd3Urfb3UTpY+jhGRNV1h+fVGnfqufr3R/PVv3e/bL+MYGG/IzVMqHksHxPX9yMvLuwd0ekxknZCdfkR2Be6NiL6AR6xjRW5Eb2RqvIrszKdC3N4gsk4zdxu8MdFF8Ij1rMiN6I2cGI/t9udC3N4kss4yd/uxi/ezLBfBI9azIjeiN3JqPLbbXwpxe4vIOs/c7ScuPpexXASPWM+K3IjeyJnx2G5/LcTtbSLrInO3n7q4v8ByETxiPStyI3oj58Zju/2tELd3iKzLzN1+5uI+GctF8Ij1rMiN6I1cGI/t9lUhbu8SWT5zt5+7uN/LchE8Yj0rciN6I5fGY7tdF+L2HpHVZO72CxfPLVgugkesZ0VuRG/EG4/tthTi9j6R1Wbu9ksXz99YLoJHrGdFbkRvpDEe220txO0DImuWuduvXDxHZrkIHrGeFbkRvZHWeGy354W4fUhkhczdfu1iPwTLRfCI9azIjeiNzIzHdrsrxO0jIus6c7ffuNjXw3IRPGI9K3IjeiPBeGy3vxfi9oTIusnc7bcu9qexXASPWM+K3IjeyLXx2G7/KMTtYyLrNnO337nYZ8lyETxiPStyI3ojN8Zju31Hdpu9zu9d7J1lrQt4RLcVuRF/Q7k1HnudiWviq5V1nrp/A3H8pw3tc/Sx4Lwf56I4P8I+O/YjsW+D51s8B+B+CdcV1B/WBj246DNEPxb6VnC+j3NQnBdhXx37j9inwfMs7vtxf4TryMQ8+d/4A46EqRHULgAA","debug_symbols":"pZPRioQgFIbfxesu0qM19SrLElY2CGLh1MISvftaf+3MLATLzNWfnr5POXhm1pp6ulbWd/2NlR8zq4N1zl4r1zd6tL2Pu/OSsGNZjcGYuMUe6pEadDB+ZKWfnEvYl3bT9tNt0H7LUYdYTRNmfBszCjvrzPq1JHc6PUcF5zsslPrF1TPPz3nK8p2nXN55/m++KHZeptl7PFcv8IrLnVeUn/HqnC+O9hXZK/RxeZ7Kdw7/i3/GlW5seHptjGesvCSM54gLothCpAiOEAhCSIRCwCJgEbAIWAgWgoVgIVgIFoKFYCFYCBaCRcIiYZGwSFgkLBIWGS18WRsUrK6d2Yeqm3zzMGPj93BUjikcQt+Ydgpm7dBWiz37AQ==","file_map":{"50":{"source":"use dep ::common::merkle_verify;\n\nfn main(\n    merkle_root: Field, // public\n    leaf: Field,        // private (hashed addr)\n    path: [Field; 16],  // private\n    dirs: [bool; 16]    // private\n) {\n    assert(merkle_verify(merkle_root, leaf, path, dirs));\n}\n","path":"/home/higobear/Desktop/CS/Coding/ZK-learning/zk-otc/circuits/whitelist_merkle/src/main.nr"},"51":{"source":"// Demo hash (INSECURE): only for MVP use\npub fn demo_hash2(a: Field, b: Field) -> Field { a * 3 + b * 5 }\n\nglobal PATH_LEN: u32 = 16;\n\n// Simplified Merkle verify using demo_hash2 (INSECURE)\npub fn merkle_verify(root: Field, leaf: Field, path: [Field; PATH_LEN], dirs: [bool; PATH_LEN]) -> bool {\n    let mut cur = leaf;\n    for i in 0..PATH_LEN {\n        let sib = path[i];\n        let left  = if dirs[i] == false { cur } else { sib };\n        let right = if dirs[i] == false { sib } else { cur };\n        cur = demo_hash2(left, right);\n    }\n    cur == root\n}\n","path":"/home/higobear/Desktop/CS/Coding/ZK-learning/zk-otc/circuits/common/src/lib.nr"}},"names":["main"],"brillig_names":[]}